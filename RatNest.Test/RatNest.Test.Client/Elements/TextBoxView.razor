@if (!Field.IsEffectivelyBlank)
{
    <div class="d-flex flex-column">

        <MudTextField Label="@EffectiveLabel"
            T="string"
            Value="@Field.Value.Value"
            ValueChanged="@Field.Value.SetValue"
            Variant="@Variant.Outlined"
            Margin="@Margin.Dense"
            Error="@(!string.IsNullOrEmpty(Field.ValidationMessage))"
            Disabled="@Field.IsDisabled" />

        @if (!string.IsNullOrEmpty(Field.ValidationMessage))
        {
            <MudText Typo="@Typo.body2" Color="@Color.Error">@Field.ValidationMessage</MudText>
        }

    </div>
}

@code {
    private TextBoxField prevField;
    [Parameter]
    public TextBoxField Field { get; set; }

    private string EffectiveLabel => $"{Field.Value.Name}{(Field.IsRequired ? "*" : "")}";

    private async Task Redraw()
    {
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (prevField != Field)
        {
            if (prevField is not null)
            {
                Field.StateChanged -= Redraw;
            }
            if (Field is not null)
            {
                Field.StateChanged += Redraw;
            }
        }
        prevField = Field;
    }
}
