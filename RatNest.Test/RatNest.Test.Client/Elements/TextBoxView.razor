@if (!field.IsEffectivelyBlank)
{
    <div style="display: flex;
                flex-direction: column;">

        <label>
            @(field.Value.Name):
            @if (field.IsRequired)
            {
                <i style="color: red;">*</i>
            }
        </label>
        <InputText Value="@field.Value.Value"
            ValueExpression="@(() => field.Value.Value)"
            ValueChanged="@field.Value.SetValue"
            disabled="@field.IsDisabled" />
        @if (!string.IsNullOrEmpty(field.ValidationMessage))
        {
            <label style="color: red;">@field.ValidationMessage</label>
        }

        <i>Name:</i>
        <InputText Value="@field.Value.Name"
            ValueExpression="@(() => field.Value.Name)"
            ValueChanged="@Rename" />

        <i>ID: @(field.Value.RefId)</i>

        @if (field.ValuesSame)
        {
            <span>Values are the same.</span>
        }

        @foreach (var (name, value) in Parent.NamingContext.ValuesByName)
        {
            <span><strong>@(name):</strong> @value.Value</span>
        }

    </div>
}

@code {
    [CascadingParameter]
    public IFormRegion Parent { get; set; }

    private TextBoxField field;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        field = new(Parent);
        field.StateChanged += async () => await InvokeAsync(StateHasChanged);
    }

    private void Rename(string newName)
    {
        newName = Parent.NamingContext.GetUniqueName(
            newName,
            excludeRefId: field.Value.RefId);

        field.Value.Rename(newName);
    }
}
