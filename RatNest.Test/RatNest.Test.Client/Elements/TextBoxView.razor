<div style="display: flex;
            flex-direction: column;">

    <label>@(field.Value.Name):</label>

    <InputText Value="@field.Value.Value"
        ValueExpression="@(() => field.Value.Value)"
        ValueChanged="@field.Value.SetValue" />

    <InputText Value="@field.Value.Name"
        ValueExpression="@(() => field.Value.Name)"
        ValueChanged="@Rename" />

    <i>(ID: @(field.Value.RefId))</i>

    @if (field.ValuesSame)
    {
        <span>Values are the same.</span>
    }

    @foreach (var (name, value) in Parent.NamingContext.ValuesByName)
    {
        <span><strong>@(name):</strong> @value.Value</span>
    }

</div>

@code {
    [CascadingParameter]
    public IFormRegion Parent { get; set; }

    private TextBoxField field;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        field = new(Parent);
        field.ValueChanged += async () => await InvokeAsync(StateHasChanged);
        field.StateChanged += async () => await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await field.Initialize();
        }
    }

    private void Rename(string newName)
    {
        newName = Parent.NamingContext.GetUniqueName(
            newName,
            excludeRefId: field.Value.RefId);

        field.Value.Rename(newName);
    }
}
